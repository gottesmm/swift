// RUN: %target-sil-opt -guaranteed-cfg-opts %s | %FileCheck %s

sil_stage raw

import Builtin

// CHECK-LABEL: sil @test_function : $@convention(thin) () -> (Builtin.Int32, Builtin.Int32) {
// CHECK: bb0:
// CHECK: integer_literal $Builtin.Int32, 0
// CHECK: integer_literal $Builtin.Int32, 1
// CHECK: bb1:
// CHECK: integer_literal $Builtin.Int32, 2
// CHECK: br bb1
// CHECK: bb2:
// CHECK: integer_literal $Builtin.Int32, 3
// CHECK: cond_br undef, bb3, bb4
// CHECK: bb3:
// CHECK: integer_literal $Builtin.Int32, 4
// CHECK: bb4:
// CHECK: [[INT5:%.*]] = integer_literal $Builtin.Int32, 5
// CHECK: [[INT6:%.*]] = integer_literal $Builtin.Int32, 6
// CHECK: [[TUPLE:%.*]] = tuple ([[INT5]] : $Builtin.Int32, [[INT6]] : $Builtin.Int32)
// CHECK: return [[TUPLE]]
sil @test_function : $@convention(thin) () -> (Builtin.Int32, Builtin.Int32) {
bb0:
  %0 = integer_literal $Builtin.Int32, 0
  br bb1

bb1:
  %1 = integer_literal $Builtin.Int32, 1
  cond_br undef, bb2, bb3

bb2:
  %2 = integer_literal $Builtin.Int32, 2
  br bb2

bb3:
  %3 = integer_literal $Builtin.Int32, 3
  cond_br undef, bb4, bb5

bb4:
  %4 = integer_literal $Builtin.Int32, 4
  br bb5

bb5:
  %5 = integer_literal $Builtin.Int32, 5
  br bb6(%5 : $Builtin.Int32)

bb6(%6 : $Builtin.Int32):
  %7 = integer_literal $Builtin.Int32, 6
  %8 = tuple (%6 : $Builtin.Int32, %7 : $Builtin.Int32)
  return %8 : $(Builtin.Int32, Builtin.Int32)
}
